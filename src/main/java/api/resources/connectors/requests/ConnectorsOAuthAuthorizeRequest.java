/**
 * This file was auto-generated by Fern from our API Definition.
 */
package api.resources.connectors.requests;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = ConnectorsOAuthAuthorizeRequest.Builder.class)
public final class ConnectorsOAuthAuthorizeRequest {
    private final Optional<String> afterTokenRedirect;

    private final Map<String, Object> additionalProperties;

    private ConnectorsOAuthAuthorizeRequest(
            Optional<String> afterTokenRedirect, Map<String, Object> additionalProperties) {
        this.afterTokenRedirect = afterTokenRedirect;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The URL to redirect to after the connector has been authorized.
     */
    @JsonProperty("after_token_redirect")
    public Optional<String> getAfterTokenRedirect() {
        return afterTokenRedirect;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConnectorsOAuthAuthorizeRequest && equalTo((ConnectorsOAuthAuthorizeRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConnectorsOAuthAuthorizeRequest other) {
        return afterTokenRedirect.equals(other.afterTokenRedirect);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.afterTokenRedirect);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> afterTokenRedirect = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ConnectorsOAuthAuthorizeRequest other) {
            afterTokenRedirect(other.getAfterTokenRedirect());
            return this;
        }

        @JsonSetter(value = "after_token_redirect", nulls = Nulls.SKIP)
        public Builder afterTokenRedirect(Optional<String> afterTokenRedirect) {
            this.afterTokenRedirect = afterTokenRedirect;
            return this;
        }

        public Builder afterTokenRedirect(String afterTokenRedirect) {
            this.afterTokenRedirect = Optional.of(afterTokenRedirect);
            return this;
        }

        public ConnectorsOAuthAuthorizeRequest build() {
            return new ConnectorsOAuthAuthorizeRequest(afterTokenRedirect, additionalProperties);
        }
    }
}
