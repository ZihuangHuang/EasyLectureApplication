/**
 * This file was auto-generated by Fern from our API Definition.
 */
package api.types;

import com.cohere.api.core.ObjectMappers;
import com.cohere.api.types.Source;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import java.util.*;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = Citation.Builder.class)
public final class Citation {
    private final Optional<Integer> start;

    private final Optional<Integer> end;

    private final Optional<String> text;

    private final Optional<List<Source>> sources;

    private final Map<String, Object> additionalProperties;

    private Citation(
            Optional<Integer> start,
            Optional<Integer> end,
            Optional<String> text,
            Optional<List<Source>> sources,
            Map<String, Object> additionalProperties) {
        this.start = start;
        this.end = end;
        this.text = text;
        this.sources = sources;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("start")
    public Optional<Integer> getStart() {
        return start;
    }

    @JsonProperty("end")
    public Optional<Integer> getEnd() {
        return end;
    }

    @JsonProperty("text")
    public Optional<String> getText() {
        return text;
    }

    @JsonProperty("sources")
    public Optional<List<Source>> getSources() {
        return sources;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Citation && equalTo((Citation) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Citation other) {
        return start.equals(other.start)
                && end.equals(other.end)
                && text.equals(other.text)
                && sources.equals(other.sources);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.start, this.end, this.text, this.sources);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> start = Optional.empty();

        private Optional<Integer> end = Optional.empty();

        private Optional<String> text = Optional.empty();

        private Optional<List<Source>> sources = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Citation other) {
            start(other.getStart());
            end(other.getEnd());
            text(other.getText());
            sources(other.getSources());
            return this;
        }

        @JsonSetter(value = "start", nulls = Nulls.SKIP)
        public Builder start(Optional<Integer> start) {
            this.start = start;
            return this;
        }

        public Builder start(Integer start) {
            this.start = Optional.of(start);
            return this;
        }

        @JsonSetter(value = "end", nulls = Nulls.SKIP)
        public Builder end(Optional<Integer> end) {
            this.end = end;
            return this;
        }

        public Builder end(Integer end) {
            this.end = Optional.of(end);
            return this;
        }

        @JsonSetter(value = "text", nulls = Nulls.SKIP)
        public Builder text(Optional<String> text) {
            this.text = text;
            return this;
        }

        public Builder text(String text) {
            this.text = Optional.of(text);
            return this;
        }

        @JsonSetter(value = "sources", nulls = Nulls.SKIP)
        public Builder sources(Optional<List<Source>> sources) {
            this.sources = sources;
            return this;
        }

        public Builder sources(List<Source> sources) {
            this.sources = Optional.of(sources);
            return this;
        }

        public Citation build() {
            return new Citation(start, end, text, sources, additionalProperties);
        }
    }
}
