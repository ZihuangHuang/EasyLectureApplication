/**
 * This file was auto-generated by Fern from our API Definition.
 */
package api.types;

import com.cohere.api.core.ObjectMappers;
import com.cohere.api.types.Citation;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CitationStartEventDeltaMessage.Builder.class)
public final class CitationStartEventDeltaMessage {
    private final Optional<Citation> citations;

    private final Map<String, Object> additionalProperties;

    private CitationStartEventDeltaMessage(Optional<Citation> citations, Map<String, Object> additionalProperties) {
        this.citations = citations;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("citations")
    public Optional<Citation> getCitations() {
        return citations;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CitationStartEventDeltaMessage && equalTo((CitationStartEventDeltaMessage) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CitationStartEventDeltaMessage other) {
        return citations.equals(other.citations);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.citations);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Citation> citations = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CitationStartEventDeltaMessage other) {
            citations(other.getCitations());
            return this;
        }

        @JsonSetter(value = "citations", nulls = Nulls.SKIP)
        public Builder citations(Optional<Citation> citations) {
            this.citations = citations;
            return this;
        }

        public Builder citations(Citation citations) {
            this.citations = Optional.of(citations);
            return this;
        }

        public CitationStartEventDeltaMessage build() {
            return new CitationStartEventDeltaMessage(citations, additionalProperties);
        }
    }
}
