/**
 * This file was auto-generated by Fern from our API Definition.
 */
package api.types;

import com.cohere.api.core.ObjectMappers;
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = DocumentSource.Builder.class)
public final class DocumentSource {
    private final Optional<String> id;

    private final Optional<Map<String, Object>> document;

    private final Map<String, Object> additionalProperties;

    private DocumentSource(
            Optional<String> id, Optional<Map<String, Object>> document, Map<String, Object> additionalProperties) {
        this.id = id;
        this.document = document;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique identifier of the document
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    @JsonProperty("document")
    public Optional<Map<String, Object>> getDocument() {
        return document;
    }

    @Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DocumentSource && equalTo((DocumentSource) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DocumentSource other) {
        return id.equals(other.id) && document.equals(other.document);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.id, this.document);
    }

    @Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<Map<String, Object>> document = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DocumentSource other) {
            id(other.getId());
            document(other.getDocument());
            return this;
        }

        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.of(id);
            return this;
        }

        @JsonSetter(value = "document", nulls = Nulls.SKIP)
        public Builder document(Optional<Map<String, Object>> document) {
            this.document = document;
            return this;
        }

        public Builder document(Map<String, Object> document) {
            this.document = Optional.of(document);
            return this;
        }

        public DocumentSource build() {
            return new DocumentSource(id, document, additionalProperties);
        }
    }
}
